&{GET /api/notes HTTP/1.1 1 1 map[User-Agent:[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36] Postman-Token:[9add1d84-7767-0c42-d8f3-45c9ce094ae1] Accept:[*/*] Accept-Encoding:[gzip, deflate, br] Accept-Language:[es-US,es;q=0.9,es-419;q=0.8,en;q=0.7] Connection:[keep-alive] Cache-Control:[no-cache] Content-Type:[application/x-www-form-urlencoded]] {} <nil> 0 [] false localhost:8080 map[] map[] <nil> map[] [::1]:50816 /api/notes <nil> <nil> <nil> 0xc4200711a0}
&{POST /api/notes HTTP/1.1 1 1 map[Connection:[keep-alive] Origin:[chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop] Accept:[*/*] Accept-Language:[es-US,es;q=0.9,es-419;q=0.8,en;q=0.7] User-Agent:[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36] Cache-Control:[no-cache] Postman-Token:[39a25672-8576-a268-ffdc-a40c1f8c8c63] Content-Type:[application/x-www-form-urlencoded] Accept-Encoding:[gzip, deflate, br] Content-Length:[46]] 0xc420060480 <nil> 46 [] false localhost:8080 map[] map[] <nil> map[] [::1]:50816 /api/notes <nil> <nil> <nil> 0xc420071590}
context.Background.WithValue(&http.contextKey{name:"http-server"}, &http.Server{Addr:":8080", Handler:(*mux.Router)(0xc420062120), TLSConfig:(*tls.Config)(0xc420001500), ReadTimeout:0, ReadHeaderTimeout:0, WriteTimeout:0, IdleTimeout:0, MaxHeaderBytes:0, TLSNextProto:map[string]func(*http.Server, *tls.Conn, http.Handler){"h2":(func(*http.Server, *tls.Conn, http.Handler))(0x61a610)}, ConnState:(func(net.Conn, http.ConnState))(nil), ErrorLog:(*log.Logger)(nil), disableKeepAlives:0, inShutdown:0, nextProtoOnce:sync.Once{m:sync.Mutex{state:0, sema:0x0}, done:0x1}, nextProtoErr:error(nil), mu:sync.Mutex{state:0, sema:0x0}, listeners:map[net.Listener]struct {}{http.tcpKeepAliveListener{TCPListener:(*net.TCPListener)(0xc42000e058)}:struct {}{}}, activeConn:map[*http.conn]struct {}{(*http.conn)(0xc42008cb40):struct {}{}}, doneChan:(chan struct {})(nil), onShutdown:[]func(){(func())(0x6227d0)}}).WithValue(&http.contextKey{name:"local-addr"}, &net.TCPAddr{IP:net.IP{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Port:8080, Zone:""}).WithCancel.WithCancel.WithValue(0, map[string]string{}).WithValue(1, &mux.Route{parent:(*mux.Router)(0xc420062120), handler:(http.HandlerFunc)(0x64ac20), matchers:[]mux.matcher{(*mux.routeRegexp)(0xc4200622a0), mux.methodMatcher{"POST"}}, regexp:(*mux.routeRegexpGroup)(0xc42007ed80), strictSlash:false, skipClean:false, useEncodedPath:false, buildScheme:"", buildOnly:false, name:"", err:error(nil), buildVarsFunc:(mux.BuildVarsFunc)(nil)})
context.Background.WithValue(&http.contextKey{name:"http-server"}, &http.Server{Addr:":8080", Handler:(*mux.Router)(0xc420062120), TLSConfig:(*tls.Config)(0xc420001500), ReadTimeout:0, ReadHeaderTimeout:0, WriteTimeout:0, IdleTimeout:0, MaxHeaderBytes:0, TLSNextProto:map[string]func(*http.Server, *tls.Conn, http.Handler){"h2":(func(*http.Server, *tls.Conn, http.Handler))(0x61a610)}, ConnState:(func(net.Conn, http.ConnState))(nil), ErrorLog:(*log.Logger)(nil), disableKeepAlives:0, inShutdown:0, nextProtoOnce:sync.Once{m:sync.Mutex{state:0, sema:0x0}, done:0x1}, nextProtoErr:error(nil), mu:sync.Mutex{state:0, sema:0x0}, listeners:map[net.Listener]struct {}{http.tcpKeepAliveListener{TCPListener:(*net.TCPListener)(0xc42000e058)}:struct {}{}}, activeConn:map[*http.conn]struct {}{(*http.conn)(0xc42008cb40):struct {}{}}, doneChan:(chan struct {})(nil), onShutdown:[]func(){(func())(0x6227d0)}}).WithValue(&http.contextKey{name:"local-addr"}, &net.TCPAddr{IP:net.IP{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Port:8080, Zone:""}).WithCancel.WithCancel.WithValue(0, map[string]string{}).WithValue(1, &mux.Route{parent:(*mux.Router)(0xc420062120), handler:(http.HandlerFunc)(0x64ac20), matchers:[]mux.matcher{(*mux.routeRegexp)(0xc4200622a0), mux.methodMatcher{"POST"}}, regexp:(*mux.routeRegexpGroup)(0xc42007ed80), strictSlash:false, skipClean:false, useEncodedPath:false, buildScheme:"", buildOnly:false, name:"", err:error(nil), buildVarsFunc:(mux.BuildVarsFunc)(nil)})
context.Background.WithValue(&http.contextKey{name:"http-server"}, &http.Server{Addr:":8080", Handler:(*mux.Router)(0xc420062120), TLSConfig:(*tls.Config)(0xc420001500), ReadTimeout:0, ReadHeaderTimeout:0, WriteTimeout:0, IdleTimeout:0, MaxHeaderBytes:0, TLSNextProto:map[string]func(*http.Server, *tls.Conn, http.Handler){"h2":(func(*http.Server, *tls.Conn, http.Handler))(0x61a610)}, ConnState:(func(net.Conn, http.ConnState))(nil), ErrorLog:(*log.Logger)(nil), disableKeepAlives:0, inShutdown:0, nextProtoOnce:sync.Once{m:sync.Mutex{state:0, sema:0x0}, done:0x1}, nextProtoErr:error(nil), mu:sync.Mutex{state:0, sema:0x0}, listeners:map[net.Listener]struct {}{http.tcpKeepAliveListener{TCPListener:(*net.TCPListener)(0xc42000e058)}:struct {}{}}, activeConn:map[*http.conn]struct {}{(*http.conn)(0xc42008cb40):struct {}{}}, doneChan:(chan struct {})(nil), onShutdown:[]func(){(func())(0x6227d0)}}).WithValue(&http.contextKey{name:"local-addr"}, &net.TCPAddr{IP:net.IP{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Port:8080, Zone:""}).WithCancel.WithCancel.WithValue(0, map[string]string{}).WithValue(1, &mux.Route{parent:(*mux.Router)(0xc420062120), handler:(http.HandlerFunc)(0x64ac20), matchers:[]mux.matcher{(*mux.routeRegexp)(0xc4200622a0), mux.methodMatcher{"POST"}}, regexp:(*mux.routeRegexpGroup)(0xc42007ed80), strictSlash:false, skipClean:false, useEncodedPath:false, buildScheme:"", buildOnly:false, name:"", err:error(nil), buildVarsFunc:(mux.BuildVarsFunc)(nil)})
context.Background.WithValue(&http.contextKey{name:"http-server"}, &http.Server{Addr:":8080", Handler:(*mux.Router)(0xc420062120), TLSConfig:(*tls.Config)(0xc420001500), ReadTimeout:0, ReadHeaderTimeout:0, WriteTimeout:0, IdleTimeout:0, MaxHeaderBytes:0, TLSNextProto:map[string]func(*http.Server, *tls.Conn, http.Handler){"h2":(func(*http.Server, *tls.Conn, http.Handler))(0x61a610)}, ConnState:(func(net.Conn, http.ConnState))(nil), ErrorLog:(*log.Logger)(nil), disableKeepAlives:0, inShutdown:0, nextProtoOnce:sync.Once{m:sync.Mutex{state:0, sema:0x0}, done:0x1}, nextProtoErr:error(nil), mu:sync.Mutex{state:0, sema:0x0}, listeners:map[net.Listener]struct {}{http.tcpKeepAliveListener{TCPListener:(*net.TCPListener)(0xc42000e058)}:struct {}{}}, activeConn:map[*http.conn]struct {}{(*http.conn)(0xc42008cb40):struct {}{}}, doneChan:(chan struct {})(nil), onShutdown:[]func(){(func())(0x6227d0)}}).WithValue(&http.contextKey{name:"local-addr"}, &net.TCPAddr{IP:net.IP{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1}, Port:8080, Zone:""}).WithCancel.WithCancel.WithValue(0, map[string]string{}).WithValue(1, &mux.Route{parent:(*mux.Router)(0xc420062120), handler:(http.HandlerFunc)(0x64a8a0), matchers:[]mux.matcher{(*mux.routeRegexp)(0xc4200621e0), mux.methodMatcher{"GET"}}, regexp:(*mux.routeRegexpGroup)(0xc42007ec90), strictSlash:false, skipClean:false, useEncodedPath:false, buildScheme:"", buildOnly:false, name:"", err:error(nil), buildVarsFunc:(mux.BuildVarsFunc)(nil)})
